-- Schema voor transport gerelateerde tabellen
-- Deze migratie brengt de kolommen in lijn met het vorige systeem
-- zodat de webapplicatie geen JSON in de notes-kolom meer hoeft te
-- gebruiken en alle velden weer rechtstreeks beschikbaar zijn.

create extension if not exists pgcrypto;

create or replace function public.set_updated_at()
returns trigger as $$
begin
  new.updated_at = now();
  return new;
end;
$$ language plpgsql;

create or replace function public.current_app_role()
returns text
language sql
stable
as $$
  select coalesce(
    nullif(auth.jwt() ->> 'app_role', ''),
    nullif(auth.jwt() -> 'app_metadata' ->> 'role', ''),
    nullif(auth.jwt() -> 'user_metadata' ->> 'role', ''),
    nullif(auth.jwt() ->> 'role', ''),
    'anon'
  );
$$;

create table if not exists public.transport_orders (
  id bigint generated by default as identity primary key,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  status text not null default 'Nieuw',
  priority integer not null default 3,
  region text,
  due_date date,
  planned_date date,
  planned_slot text,
  assigned_carrier text,
  reference text,
  request_reference text,
  transport_type text,
  request_received_date date,
  customer_name text not null,
  customer_number text,
  customer_city text,
  customer_contact text,
  customer_contact_phone text,
  customer_contact_email text,
  customer_order_number text,
  order_reference text,
  order_description text,
  pickup_confirmed boolean,
  pickup_location text,
  pickup_date date,
  pickup_time_from time,
  pickup_time_to time,
  pickup_slot text,
  pickup_contact text,
  pickup_contact_phone text,
  pickup_instructions text,
  delivery_confirmed boolean,
  delivery_location text,
  delivery_date date,
  delivery_time_from time,
  delivery_time_to time,
  delivery_slot text,
  delivery_contact text,
  delivery_contact_phone text,
  delivery_instructions text,
  load_type text,
  cargo_type text,
  instructions text,
  notes text,
  article_type text,
  created_by uuid,
  created_by_name text
);

alter table public.transport_orders
  alter column status set default 'Nieuw';

alter table public.transport_orders
  alter column priority set default 3;

alter table public.transport_orders add column if not exists due_date date;
alter table public.transport_orders add column if not exists planned_date date;
alter table public.transport_orders add column if not exists planned_slot text;
alter table public.transport_orders add column if not exists assigned_carrier text;
alter table public.transport_orders add column if not exists reference text;
alter table public.transport_orders add column if not exists request_reference text;
alter table public.transport_orders add column if not exists transport_type text;
alter table public.transport_orders
  alter column transport_type set default 'Afleveren';
alter table public.transport_orders add column if not exists request_received_date date;
alter table public.transport_orders add column if not exists customer_name text;
alter table public.transport_orders add column if not exists customer_number text;
alter table public.transport_orders add column if not exists customer_city text;
alter table public.transport_orders add column if not exists customer_contact text;
alter table public.transport_orders add column if not exists customer_contact_phone text;
alter table public.transport_orders add column if not exists customer_contact_email text;
alter table public.transport_orders add column if not exists customer_order_number text;
alter table public.transport_orders add column if not exists order_reference text;
alter table public.transport_orders add column if not exists order_description text;
alter table public.transport_orders add column if not exists pickup_confirmed boolean;
alter table public.transport_orders add column if not exists pickup_location text;
alter table public.transport_orders add column if not exists pickup_date date;
alter table public.transport_orders add column if not exists pickup_time_from time;
alter table public.transport_orders add column if not exists pickup_time_to time;
alter table public.transport_orders add column if not exists pickup_slot text;
alter table public.transport_orders add column if not exists pickup_contact text;
alter table public.transport_orders add column if not exists pickup_contact_phone text;
alter table public.transport_orders add column if not exists pickup_instructions text;
alter table public.transport_orders add column if not exists delivery_confirmed boolean;
alter table public.transport_orders add column if not exists delivery_location text;
alter table public.transport_orders add column if not exists delivery_date date;
alter table public.transport_orders add column if not exists delivery_time_from time;
alter table public.transport_orders add column if not exists delivery_time_to time;
alter table public.transport_orders add column if not exists delivery_slot text;
alter table public.transport_orders add column if not exists delivery_contact text;
alter table public.transport_orders add column if not exists delivery_contact_phone text;
alter table public.transport_orders add column if not exists delivery_instructions text;
alter table public.transport_orders add column if not exists load_type text;
alter table public.transport_orders add column if not exists cargo_type text;
alter table public.transport_orders add column if not exists instructions text;
alter table public.transport_orders add column if not exists notes text;
alter table public.transport_orders add column if not exists article_type text;
alter table public.transport_orders add column if not exists created_by uuid;
alter table public.transport_orders add column if not exists created_by_name text;

alter table public.transport_orders
  add column if not exists updated_at timestamptz not null default now();

do $$
begin
  if not exists (
    select 1
    from pg_constraint
    where conname = 'transport_orders_transport_type_allowed'
      and conrelid = 'public.transport_orders'::regclass
  ) then
    alter table public.transport_orders
      add constraint transport_orders_transport_type_allowed
      check (transport_type is null or transport_type = 'Afleveren');
  end if;
end $$;

do $$
begin
  if to_regclass('public.transport_trucks') is not null then
    execute 'alter table public.transport_trucks enable row level security';
    execute 'drop policy if exists "allow anon read transport_trucks" on public.transport_trucks';
    execute 'drop policy if exists "allow anon modify transport_trucks" on public.transport_trucks';

    if not exists (
      select 1 from pg_policies
      where schemaname = 'public'
        and tablename = ''transport_trucks''
        and policyname = ''transport_trucks_select_by_role''
    ) then
      execute ''create policy transport_trucks_select_by_role on public.transport_trucks for select using (public.current_app_role() in (''''admin'''',''''planner'''',''''werknemer''''))'';
    end if;

    if not exists (
      select 1 from pg_policies
      where schemaname = 'public'
        and tablename = ''transport_trucks''
        and policyname = ''transport_trucks_insert_by_planner''
    ) then
      execute ''create policy transport_trucks_insert_by_planner on public.transport_trucks for insert with check (public.current_app_role() in (''''admin'''',''''planner''''))'';
    end if;

    if not exists (
      select 1 from pg_policies
      where schemaname = 'public'
        and tablename = ''transport_trucks''
        and policyname = ''transport_trucks_update_by_planner''
    ) then
      execute ''create policy transport_trucks_update_by_planner on public.transport_trucks for update using (public.current_app_role() in (''''admin'''',''''planner'''')) with check (public.current_app_role() in (''''admin'''',''''planner''''))'';
    end if;

    if not exists (
      select 1 from pg_policies
      where schemaname = 'public'
        and tablename = ''transport_trucks''
        and policyname = ''transport_trucks_delete_by_admin''
    ) then
      execute ''create policy transport_trucks_delete_by_admin on public.transport_trucks for delete using (public.current_app_role() = ''''admin'''')'';
    end if;
  end if;
end $$;

do $$
begin
  if not exists (
    select 1
    from pg_constraint
    where conname = 'transport_orders_article_type_allowed'
      and conrelid = 'public.transport_orders'::regclass
  ) then
    alter table public.transport_orders
      add constraint transport_orders_article_type_allowed
      check (article_type is null or article_type in ('serial', 'non_serial'));
  end if;
end $$;

create index if not exists transport_orders_due_date_idx
  on public.transport_orders using btree (due_date);

create index if not exists transport_orders_planned_date_idx
  on public.transport_orders using btree (planned_date);

create index if not exists transport_orders_status_idx
  on public.transport_orders using btree (status);

create index if not exists transport_orders_region_idx
  on public.transport_orders using btree (region);

create table if not exists public.audit_log (
  id bigint generated by default as identity primary key,
  order_id bigint not null,
  action text not null,
  user_id uuid,
  user_name text,
  ts timestamptz not null default now(),
  payload jsonb
);

create index if not exists audit_log_order_id_idx
  on public.audit_log using btree (order_id);

create index if not exists audit_log_ts_idx
  on public.audit_log using btree (ts desc);

create or replace trigger transport_orders_set_updated_at
  before update on public.transport_orders
  for each row
  execute function public.set_updated_at();

alter table public.transport_orders enable row level security;

drop policy if exists "allow anon read transport_orders" on public.transport_orders;
drop policy if exists "allow anon modify transport_orders" on public.transport_orders;

do $$
begin
  if not exists (
    select 1 from pg_policies
    where schemaname = 'public'
      and tablename = 'transport_orders'
      and policyname = 'transport_orders_select_by_role'
  ) then
    create policy transport_orders_select_by_role
      on public.transport_orders
      for select
      using (public.current_app_role() in ('admin', 'planner', 'werknemer'));
  end if;

  if not exists (
    select 1 from pg_policies
    where schemaname = 'public'
      and tablename = 'transport_orders'
      and policyname = 'transport_orders_modify_by_planner'
  ) then
    create policy transport_orders_modify_by_planner
      on public.transport_orders
      for insert
      with check (public.current_app_role() in ('admin', 'planner'));
  end if;

  if not exists (
    select 1 from pg_policies
    where schemaname = 'public'
      and tablename = 'transport_orders'
      and policyname = 'transport_orders_update_by_planner'
  ) then
    create policy transport_orders_update_by_planner
      on public.transport_orders
      for update
      using (public.current_app_role() in ('admin', 'planner'))
      with check (public.current_app_role() in ('admin', 'planner'));
  end if;

  if not exists (
    select 1 from pg_policies
    where schemaname = 'public'
      and tablename = 'transport_orders'
      and policyname = 'transport_orders_delete_by_planner'
  ) then
    create policy transport_orders_delete_by_planner
      on public.transport_orders
      for delete
      using (public.current_app_role() in ('admin', 'planner'));
  end if;
end $$;

create table if not exists public.transport_lines (
  id bigint generated by default as identity primary key,
  created_at timestamptz not null default now(),
  order_id bigint not null references public.transport_orders(id) on delete cascade,
  product text not null,
  quantity integer not null default 1,
  serial_number text,
  article_type text
);

alter table public.transport_lines add column if not exists quantity integer;
alter table public.transport_lines alter column quantity set default 1;
alter table public.transport_lines add column if not exists serial_number text;
alter table public.transport_lines add column if not exists article_type text;

do $$
begin
  if not exists (
    select 1
    from pg_constraint
    where conname = 'transport_lines_article_type_allowed'
      and conrelid = 'public.transport_lines'::regclass
  ) then
    alter table public.transport_lines
      add constraint transport_lines_article_type_allowed
      check (article_type is null or article_type in ('serial', 'non_serial'));
  end if;
end $$;

create index if not exists transport_lines_order_id_idx
  on public.transport_lines using btree (order_id);

alter table public.transport_lines enable row level security;

drop policy if exists "allow anon read transport_lines" on public.transport_lines;
drop policy if exists "allow anon modify transport_lines" on public.transport_lines;

do $$
begin
  if not exists (
    select 1 from pg_policies
    where schemaname = 'public'
      and tablename = 'transport_lines'
      and policyname = 'transport_lines_select_by_role'
  ) then
    create policy transport_lines_select_by_role
      on public.transport_lines
      for select
      using (public.current_app_role() in ('admin', 'planner', 'werknemer'));
  end if;

  if not exists (
    select 1 from pg_policies
    where schemaname = 'public'
      and tablename = 'transport_lines'
      and policyname = 'transport_lines_insert_by_planner'
  ) then
    create policy transport_lines_insert_by_planner
      on public.transport_lines
      for insert
      with check (public.current_app_role() in ('admin', 'planner'));
  end if;

  if not exists (
    select 1 from pg_policies
    where schemaname = 'public'
      and tablename = 'transport_lines'
      and policyname = 'transport_lines_update_by_planner'
  ) then
    create policy transport_lines_update_by_planner
      on public.transport_lines
      for update
      using (public.current_app_role() in ('admin', 'planner'))
      with check (public.current_app_role() in ('admin', 'planner'));
  end if;

  if not exists (
    select 1 from pg_policies
    where schemaname = 'public'
      and tablename = 'transport_lines'
      and policyname = 'transport_lines_delete_by_planner'
  ) then
    create policy transport_lines_delete_by_planner
      on public.transport_lines
      for delete
      using (public.current_app_role() in ('admin', 'planner'));
  end if;
end $$;

create table if not exists public.carriers (
  id bigint generated by default as identity primary key,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  name text not null unique,
  base_region text,
  capacity_per_day integer,
  active boolean not null default true
);

alter table public.carriers add column if not exists updated_at timestamptz not null default now();
alter table public.carriers add column if not exists capacity_per_day integer;
alter table public.carriers add column if not exists active boolean not null default true;

create or replace trigger carriers_set_updated_at
  before update on public.carriers
  for each row
  execute function public.set_updated_at();

create index if not exists carriers_active_idx
  on public.carriers using btree (active);

alter table public.carriers enable row level security;

drop policy if exists "allow anon read carriers" on public.carriers;
drop policy if exists "allow anon modify carriers" on public.carriers;

do $$
begin
  if not exists (
    select 1 from pg_policies
    where schemaname = 'public'
      and tablename = 'carriers'
      and policyname = 'carriers_select_by_role'
  ) then
    create policy carriers_select_by_role
      on public.carriers
      for select
      using (public.current_app_role() in ('admin', 'planner', 'werknemer'));
  end if;

  if not exists (
    select 1 from pg_policies
    where schemaname = 'public'
      and tablename = 'carriers'
      and policyname = 'carriers_insert_by_planner'
  ) then
    create policy carriers_insert_by_planner
      on public.carriers
      for insert
      with check (public.current_app_role() in ('admin', 'planner'));
  end if;

  if not exists (
    select 1 from pg_policies
    where schemaname = 'public'
      and tablename = 'carriers'
      and policyname = 'carriers_update_by_planner'
  ) then
    create policy carriers_update_by_planner
      on public.carriers
      for update
      using (public.current_app_role() in ('admin', 'planner'))
      with check (public.current_app_role() in ('admin', 'planner'));
  end if;

  if not exists (
    select 1 from pg_policies
    where schemaname = 'public'
      and tablename = 'carriers'
      and policyname = 'carriers_delete_by_admin'
  ) then
    create policy carriers_delete_by_admin
      on public.carriers
      for delete
      using (public.current_app_role() = 'admin');
  end if;
end $$;
