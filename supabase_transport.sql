-- Schema voor transport gerelateerde tabellen
-- Deze migratie brengt de kolommen in lijn met het vorige systeem
-- zodat de webapplicatie geen JSON in de notes-kolom meer hoeft te
-- gebruiken en alle velden weer rechtstreeks beschikbaar zijn.

create extension if not exists pgcrypto;

create or replace function public.set_updated_at()
returns trigger as $$
begin
  new.updated_at = now();
  return new;
end;
$$ language plpgsql;

create table if not exists public.transport_orders (
  id bigint generated by default as identity primary key,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  status text not null default 'Nieuw',
  priority integer not null default 3,
  region text,
  due_date date,
  planned_date date,
  planned_slot text,
  assigned_carrier text,
  reference text,
  customer_name text not null,
  customer_city text,
  customer_contact text,
  pickup_location text,
  pickup_date date,
  pickup_slot text,
  delivery_location text,
  delivery_date date,
  delivery_slot text,
  load_type text,
  cargo_type text,
  pallets integer,
  weight_kg numeric,
  volume_m3 numeric,
  instructions text,
  notes text,
  created_by uuid,
  created_by_name text
);

alter table public.transport_orders
  alter column status set default 'Nieuw';

alter table public.transport_orders
  alter column priority set default 3;

alter table public.transport_orders add column if not exists due_date date;
alter table public.transport_orders add column if not exists planned_date date;
alter table public.transport_orders add column if not exists planned_slot text;
alter table public.transport_orders add column if not exists assigned_carrier text;
alter table public.transport_orders add column if not exists reference text;
alter table public.transport_orders add column if not exists customer_name text;
alter table public.transport_orders add column if not exists customer_city text;
alter table public.transport_orders add column if not exists customer_contact text;
alter table public.transport_orders add column if not exists pickup_location text;
alter table public.transport_orders add column if not exists pickup_date date;
alter table public.transport_orders add column if not exists pickup_slot text;
alter table public.transport_orders add column if not exists delivery_location text;
alter table public.transport_orders add column if not exists delivery_date date;
alter table public.transport_orders add column if not exists delivery_slot text;
alter table public.transport_orders add column if not exists load_type text;
alter table public.transport_orders add column if not exists cargo_type text;
alter table public.transport_orders add column if not exists pallets integer;
alter table public.transport_orders add column if not exists weight_kg numeric;
alter table public.transport_orders add column if not exists volume_m3 numeric;
alter table public.transport_orders add column if not exists instructions text;
alter table public.transport_orders add column if not exists notes text;
alter table public.transport_orders add column if not exists created_by uuid;
alter table public.transport_orders add column if not exists created_by_name text;

alter table public.transport_orders
  add column if not exists updated_at timestamptz not null default now();

create index if not exists transport_orders_due_date_idx
  on public.transport_orders using btree (due_date);

create index if not exists transport_orders_planned_date_idx
  on public.transport_orders using btree (planned_date);

create index if not exists transport_orders_status_idx
  on public.transport_orders using btree (status);

create index if not exists transport_orders_region_idx
  on public.transport_orders using btree (region);

create or replace trigger transport_orders_set_updated_at
  before update on public.transport_orders
  for each row
  execute function public.set_updated_at();

alter table public.transport_orders enable row level security;

do $$
begin
  if not exists (
    select 1 from pg_policies
    where schemaname = 'public'
      and tablename = 'transport_orders'
      and policyname = 'allow anon read transport_orders'
  ) then
    create policy "allow anon read transport_orders"
      on public.transport_orders
      for select using (true);
  end if;

  if not exists (
    select 1 from pg_policies
    where schemaname = 'public'
      and tablename = 'transport_orders'
      and policyname = 'allow anon modify transport_orders'
  ) then
    create policy "allow anon modify transport_orders"
      on public.transport_orders
      for all using (true) with check (true);
  end if;
end $$;

create table if not exists public.transport_lines (
  id bigint generated by default as identity primary key,
  created_at timestamptz not null default now(),
  order_id bigint not null references public.transport_orders(id) on delete cascade,
  product text not null,
  quantity integer not null default 1,
  weight_kg numeric
);

alter table public.transport_lines add column if not exists weight_kg numeric;
alter table public.transport_lines add column if not exists quantity integer;
alter table public.transport_lines alter column quantity set default 1;

create index if not exists transport_lines_order_id_idx
  on public.transport_lines using btree (order_id);

alter table public.transport_lines enable row level security;

do $$
begin
  if not exists (
    select 1 from pg_policies
    where schemaname = 'public'
      and tablename = 'transport_lines'
      and policyname = 'allow anon read transport_lines'
  ) then
    create policy "allow anon read transport_lines"
      on public.transport_lines
      for select using (true);
  end if;

  if not exists (
    select 1 from pg_policies
    where schemaname = 'public'
      and tablename = 'transport_lines'
      and policyname = 'allow anon modify transport_lines'
  ) then
    create policy "allow anon modify transport_lines"
      on public.transport_lines
      for all using (true) with check (true);
  end if;
end $$;

create table if not exists public.carriers (
  id bigint generated by default as identity primary key,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  name text not null unique,
  base_region text,
  capacity_per_day integer,
  active boolean not null default true
);

alter table public.carriers add column if not exists updated_at timestamptz not null default now();
alter table public.carriers add column if not exists capacity_per_day integer;
alter table public.carriers add column if not exists active boolean not null default true;

create or replace trigger carriers_set_updated_at
  before update on public.carriers
  for each row
  execute function public.set_updated_at();

create index if not exists carriers_active_idx
  on public.carriers using btree (active);

alter table public.carriers enable row level security;

do $$
begin
  if not exists (
    select 1 from pg_policies
    where schemaname = 'public'
      and tablename = 'carriers'
      and policyname = 'allow anon read carriers'
  ) then
    create policy "allow anon read carriers"
      on public.carriers
      for select using (true);
  end if;

  if not exists (
    select 1 from pg_policies
    where schemaname = 'public'
      and tablename = 'carriers'
      and policyname = 'allow anon modify carriers'
  ) then
    create policy "allow anon modify carriers"
      on public.carriers
      for all using (true) with check (true);
  end if;
end $$;
